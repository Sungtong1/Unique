pragma solidity ^0.4.19;

contract ZombieFactory {

    // 상태변수는 컨트랙트 저장소에 영구적으로 저장된다
    // 즉, 이더리움 블록체인에 기록된다
    // 즉, 데이터베이스에 데이터를 쓰는 것과 같다
    uint dnaDigits = 16;
	
	
	// 솔리디티는 지수연산도 지원
	// 5 ** 2 == 25
	// 10 ^ 16 값은 배정
	uint dnaModulus = 10 ** dnaDigits;
	
	
	// 솔리디티는 구조체를 제공한다
	// 좀 더 복잡한 자료형을 필요로할 때 사용한다
	struct Zombie {
        string name;
        uint dna;
    }
	
	
	// 배열 역시 사용 가능하다
	// 정적 배열과 동적 배열로 나뉜다
	// 정적 배열 = 고정 길이의 배열
	// 동적 배열 = 고정된 크기가 없는 배열
	
	// public 으로 배열을 선언 가능하다
	// 솔리디티는 이런 배열을 위해 자동으로 getter를 생성해준다
	Zombie[] public zombies;
	
	
	// 함수선언 가능하다
	// _를 사용해서 전역변수와 매개변수를 구별하는 것이 관례
	// 새로운 좀비를 생성해서 배열 안에 넣어준다
	function createZombie(string _name, uint _dna) {
		zombies.push(Zombie(_name, _dna));
	}
	
	
	
	// 솔리디티의 함수는 기본적으로 public 으로 선언된다
	// 다른 누군가가 나의 컨트랙트의 함수를 호출하고 코드를 실행할 수 있다는 의미
	// 하지만, private 선언을 해줘서 관리할 수 있다
	// private를 선언할 때, 보통 _를 통해서 함수 이름을 구분짓는 것이 관례
	function _createZombie (string _name, uint _dna) private {
		zombies.push(Zombie(_name, _dna));
	}
	
	
	// 함수의 반환값 역시 받을 수 있음
	// 반환값 종류를 선언해준다
	// 변수를 보기만 하지 변경하지 않는 함수에는 view를 선언해서 사용한다
	// pure 역시 가질 수 있는데, 이 말의 뜻은 앱에서 어떠한 데이터에도 접근하지 않는다는 의미
	// 아래와 같이 사용 가능
	function _multiply(uint a, uint b) private pure returns (uint) {
		return a * b;
	}
	
    function _generateRandomDna(string _str) private view returns (uint) {
        
    }
	
	
	
	// Keccak256
	// 내장 해시함수로 Keccak256을 가지고 있다
	// 의사 난수 발생기로 이용된다
	keccak256("aaaab");
	keccak256("aaaac");
	// 두 결과값의 차이가 매우 크다
	
	// 형변환을 할 필요가 있을 수 있다
	// * 연산의 경우, 결과값을 uint로 반환하기 때문에, uint8의 값으로 받을 수 없다
	// uint8 c = a * b; 는 에러가 발생
	// uint8 c = a * uint8(b); 로 작성해야 한다
	
	// keccak256을 통해서 의사 난수를 생성한 다음, 형변환을 통해서 uint에 저장한다
	// 저장한 값 중에서 우리는 16자리의 값만 사용하므로, 모듈러 연산을 취해준다
	function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
		return rand % dnaModulus;
    }
	
	
	
	// 모든 내용을 종합하는 public 함수를 생성하자
	// createRandomZombie라는 public함수를 생성한다. 
	// 이 함수는 _name이라는 string형 인자를 하나 전달받는다. 
	// (참고: 함수를 private로 선언한 것과 마찬가지로 함수를 public로 생성할 것)
	// 이 함수의 첫 줄에서는 _name을 전달받은 _generateRandomDna 함수를 호출하고,
	// 이 함수의 반환값을 randDna라는 uint형 변수에 저장해야 한다.
	// 두번째 줄에서는 _createZombie 함수를 호출하고 
	// 이 함수에 _name와 randDna를 전달해야 한다.
	// 함수의 내용을 닫는 }를 포함해서 코드가 4줄이어야 한다.
	function createRandomZombie(string _name) public {
		uint randDna = _generateRandomDna(_name);
		_createZombie(_name, randDna);
	}
	
	
	
	// 이벤트를 추가해보자
	// 이벤트는 컨트랙트가 블록체인 상에서 나의 앱의 사용자 단에서 무언가 액션이 발생했을 때 의사소통하는 방법
	// 컨트랙트는 특정 이벤트가 일어나는지 대기하고 있다가 그 이벤트가 발생하면 행동을 취한다
	
	// 이벤트를 선언하고 사용한다
	// 이벤트의 매개변수에는 굳이 _를 안붙이는듯
	// 어짜피 전역변수와 헷갈릴 일이 없기때문인듯
	event IntegersAdded(uint x, uint y, uint result);

	function add(uint _x, uint _y) public {
	  uint result = _x + _y;
	  // 이벤트를 실행하여 앱에게 add 함수가 실행되었음을 알린다:
	  IntegersAdded(_x, _y, result);
	  return result;
	}
	
	// 좀비가 생성될 때마다 우리 앱의 사용자 단에서 이에 대해 알고, 를 표시하도록 하는 이벤트
	// NewZombie라는 event를 선언
	// zombieId (uint형), name (string형), dna (uint형)을 매개변수로 받음
	// _createZombie 함수를 변경하여 새로운 좀비가 zombies 배열에 추가된 후에 
	// NewZombie 이벤트를 실행
	// 이벤트를 위해 좀비의 id가 필요할 것
	// array.push()는 배열의 새로운 길이를 uint형으로 반환
	// 배열의 첫 원소가 0이라는 인덱스를 갖기 때문에, array.push() - 1은 막 추가된 좀비의 인덱스가 될 것
	// zombies.push() - 1의 결과값을 uint형인 id로 저장하고 이를 다음 줄에서 NewZombie 이벤트를 위해 활용
	// push할 때, push만 하는 것이 아니라 return값으로 다음 들어갈 인덱스를 반환하기 때문에 id를 얻을 수 있음
	event NewZombie(uint zombieId, string name, uint dna);
    function _createZombie(string _name, uint _dna) private {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        NewZombie(id, _name, _dna);
    }

	
	
	// 이런 방식으로 솔리디티 컨트랙트를 완성할 수 있다
	// 이 컨트랙트와 상호작용하는 사용자 단의 자바스크립트 코드를 작성해야한다
	// 이더리움은 Web3.js 라고 하는 자바스크립트 라이브러리를 가지고 있다
	
}


