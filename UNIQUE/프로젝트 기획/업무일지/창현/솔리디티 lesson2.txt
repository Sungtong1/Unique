// 레슨2 에서는 좀비를 생성하는 방식을 변경한다
// 기존에는 좀비의 이름을 받아서 랜덤으로 좀비를 생성한 다음, 좀비를 블록체인 상의 좀비 DB에 추가하는 함수를 만들었었다
// 조금 더 게임답게 하기 위해서, 다른 생명체를 먹어서 새롭게 생성하도록 한다


// DB에 저장된 좀비들에게 주인을 설정하여 멀티플레이어 게임으로 만들어보자
// 이걸 하려면 Mapping과 Address 라는 2가지 새로운 자료형이 필요하다

// 주소
// 이더리움 블록체인은 은행 계좌와 같은 계정들로 이루어져있다
// 계정은 이더리움 블록체인상의 통화인 '이더'의 잔액을 갖는다
// 계정을 통해서 다른 계정과 이더를 주고받을 수 있다
// 각 계좌는 은행 계좌 번호와 같은 주소를 가지고 있다
// 즉, 주소는 특정 계정을 가리키는 고유 식별자 역할을 한다

// 새로운 좀비를 생성하면, 좀비를 생성하는 함수를 호출한 이더리움 주소에 그 좀비에 대한 소유권을 부여한다


// 매핑
// 레슨 1에서 본 구조체와 배열과는 다른 솔리디티에서 구조화된 데이터를 저장하는 또다른 방법
// 아래와 같은 방식으로 저장한다

	// 금융 앱용으로, 유저의 계좌 잔액을 보유하는 uint를 저장한다: 
	mapping (address => uint) public accountBalance;
	// 혹은 userID로 유저 이름을 저장/검색하는 데 매핑을 쓸 수도 있다 
	mapping (uint => string) userIdToName;

// 매핑은 기본적으로 키-값(key-value) 저장소로, 데이터를 저장하고 검색하는데 이용된다.
// 첫번째 예시의 key는 address, 두번쨰 예시의 key는 uint
// 첫번째 예시의 value는 uint,  두번째 예시의 value는 string

// 좀비의 소유권을 저장하기 위해 2가지를 매핑한다
// 하나는 좀비 소유자를 추적하기 위함
// 다른 하나는 소유한 좀비의 숫자를 추적하기 위함
    mapping (uint => address) public zombieToOwner;
    mapping (address => uint) ownerZombieCount;
	



// 좀비 소유자를 추적하는 매핑을 가지게됬으니, _createZombie 메소드에서 매핑을 사용하자
// 이를 위해서 msg.sender 라는 것을 이용해야한다

// msg.sender
// 솔리디티에는 모든 함수에서 이용 가능한 특정 전역변수가 있다
// 그 중의 하나가 현재 함수를 호출한 사람(혹은 스마트 컨트랙트)의 주소를 가리키는 msg.sender

// 솔리디티에서 함수 실행은 항상 외부 호출자가 시작한다
// 컨트랙트는 누군가가 컨트랙트의 함수를 호출할 때까지 블록체인 상에서 아무것도 안하고 있는다
// 그렇기 때문에 항상 msg.sender가 필요하다

// msg.sender를 사용해서 mapping을 업데이트하는 예시
	mapping (address => uint) favoriteNumber;

	function setMyNumber(uint _myNumber) public {
	  // `msg.sender`에 대해 `_myNumber`가 저장되도록 `favoriteNumber` 매핑을 업데이트한다 `
	  favoriteNumber[msg.sender] = _myNumber;
	  // ^ 데이터를 저장하는 구문은 배열로 데이터를 저장할 떄와 동일하다 
	}

	function whatIsMyNumber() public view returns (uint) {
	  // sender의 주소에 저장된 값을 불러온다 
	  // sender가 `setMyNumber`을 아직 호출하지 않았다면 반환값은 `0`이 될 것이다
	  return favoriteNumber[msg.sender];
	}

// 위의 예시에서, 누구나 setMyNumber를 호출하여 본인의 주소와 연결된 우리 컨트랙트 내에 uint를 저장가능
// msg.sender를 사용하면, 이더리움 블록체인의 보안성을 이용할 수 있다
// 즉, 누군가 다른 사람의 데이터를 변경하려면 해당 이더리움 주소와 관련된 개인키를 훔치는 것 밖에는 다른 방법이 없다

// 레슨 1에서 다뤘던 _createZombie 메소드를 업데이트
// 이 함수를 호출하는 누구나 좀비 소유권을 부여
// 먼저, 새로운 좀비의 id가 반환된 
// zombieToOwner 매핑을 업데이트
// id에 대하여 msg.sender가 저장
// 저장된 msg.sender을 고려하여 ownerZombieCount를 증가시키자
    function _createZombie(string _name, uint _dna) private {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }




// Require
// 무한정 좀비를 생성하는 것을 막아야 할 것
// 각 플레이어가 이 함수를 한 번만 호출할 수 있도록 만들자
// require를 활용하면 특정 조건이 참이 아닐 때 함수가 에러 메시지를 발생하고 실행이 멈춘다
	function sayHiToVitalik(string _name) public returns (string) {
	  // _name이 "Vitalik"인지 비교한다. 참이 아닐 경우 에러 메시지를 발생하고 함수를 벗어난다
	  // (참고: 솔리디티는 고유의 스트링 비교 기능을 가지고 있지 않기 때문에 
	  // 스트링의 keccak256 해시값을 비교하여 스트링 값이 같은지 판단한다)
	  require(keccak256(_name) == keccak256("Vitalik"));
	  // 참이면 함수 실행을 진행한다:
	  return "Hi!";
	}

// require는 함수를 실행하기 전에 참이어야 하는 특정 조건을 확인하는데 있어서 유용하다

// createRandomZombie를 require로 만들어 유저당 한 번만 호출되도록 하자
// ownerZombieCount값을 확인해서 0이면 OK
    function createRandomZombie(string _name) public {
        require(ownerZombieCount[msg.sender] == 0);
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }




// 코드가 길어질 때, 엄청나게 긴 컨트랙트 하나보다는 코드를 잘 정리해서 여러 컨트랙트에 코드로직을 나누는 것이 좋다
// 상속 
	contract Doge {
	  function catchphrase() public returns (string) {
		return "So Wow CryptoDoge";
	  }
	}

	contract BabyDoge is Doge {
	  function anotherCatchphrase() public returns (string) {
		return "Such Moon BabyDoge";
	  }
	}

// BabyDoge가 Doge를 상속했다
// BabyDoge 컨트랙트를 컴파일해서 구축할 때, BabyDoge 컨트랙트가 Doge의 함수까지 접근할 수 있다
// 상속의 개념은, 부분집합 클래스가 있을 때 논리적 상속을 위해서 사용할 수도 있지만,
// 동일한 로직을 다수의 클래스로 분할해서 단순히 코드를 정리할 때도 있다



// 코드를 분리하면서, 여러 파일로 분리할 수 있다
// 다수의 파일이 있고, 어떤 파일을 다른 파일로 불러오고 싶을 때, 솔리디티는 import라는 키워들르 사용한다
	import "./someothercontract.sol";

	contract newContract is SomeOtherContract {

	}

// 이 컨트랙트와 동일한 폴더에 (이게 ./가 의미하는 바임) someothercontract.sol이라는 파일이 있을 때, 
// 이 파일을 컴파일러 불러온다



// Storage vs Memory
// Storage 는 블록체인 상에 영구적으로 저장되는 변수
// Memory는 임시적으로 저장되는 변수, 컨트랙트 함수에 대한 외부 호출들이 일어나는 사이에 지워진다

// 대부분의 경우에는 이런 키워드를 이용할 필요가 없음. 솔리디티가 알아서 해주기 때문
// 함수 외부에서 선언된 변수는 초기 설정상 storage로 선언되어 영구 저장된다
// 함수 내에서 선언된 변수는 memory로 자동 선언되어 함수 호출이 종료되면 사라진다

// 하지만, 구조체와 배열을 처리할 때는 이 키워드를 사용할 필요가 있다
	contract SandwichFactory {
	  struct Sandwich {
		string name;
		string status;
	  }

	  Sandwich[] sandwiches;

	  function eatSandwich(uint _index) public {
		// Sandwich mySandwich = sandwiches[_index];

		// ^ 꽤 간단해 보이나, 솔리디티는 여기서 
		// `storage`나 `memory`를 명시적으로 선언해야 한다는 경고 메시지를 발생한다. 
		// 그러므로 `storage` 키워드를 활용하여 다음과 같이 선언해야 한다:
		Sandwich storage mySandwich = sandwiches[_index];
		// ...이 경우, `mySandwich`는 저장된 `sandwiches[_index]`를 가리키는 포인터이다.
		// 그리고 
		mySandwich.status = "Eaten!";
		// ...이 코드는 블록체인 상에서 `sandwiches[_index]`을 영구적으로 변경한다. 

		// 단순히 복사를 하고자 한다면 `memory`를 이용하면 된다: 
		Sandwich memory anotherSandwich = sandwiches[_index + 1];
		// ...이 경우, `anotherSandwich`는 단순히 메모리에 데이터를 복사하는 것이 된다. 
		// 그리고 
		anotherSandwich.status = "Eaten!";
		// ...이 코드는 임시 변수인 `anotherSandwich`를 변경하는 것으로 
		// `sandwiches[_index + 1]`에는 아무런 영향을 끼치지 않는다. 그러나 다음과 같이 코드를 작성할 수 있다: 
		sandwiches[_index + 1] = anotherSandwich;
		// ...이는 임시 변경한 내용을 블록체인 저장소에 저장하고자 하는 경우이다.
	  }
	}

// 좀비가 어떤 다른 생명체를 잡아 먹을 때, 좀비 DNA가 생명체의 DNA와 혼합되어 새로운 생명체를 생성
// feedAndMultiply라는 함수를 생성, uint형인 _zombieId, _targetDna 매개변수
// public 선언되어
// 주인만 먹이를 줄 수 있게 하므로, require 선언으로 msg.sender == 좀비 주인만
// 먹이를 먹는 좀비 DNA가 필요하기 때문에, myZombie라는 Zombie형 변수 선언 (Storage 포인터)
// zombies 배열의 _zombieId 인덱스가 가진 값에 부여
	function feedAndMultiply(uint _zombieId, uint _targetDna) public {
		require(msg.sender == zombieToOwner[_zombieId]);
		Zombie storage myZombie = zombies[_zombieId];
	}



// feedAndMultiply 함수 작성을 마무리 하자
// 새로운 좀비의 DNA는 먹이를 먹는 좀비와 먹이의 DNA 평균이다
	function testDnaSplicing() public {
	  uint zombieDna = 2222222222222222;
	  uint targetDna = 4444444444444444;
	  uint newZombieDna = (zombieDna + targetDna) / 2;
	  // ^ 3333333333333333이 될 것이다
	}

// 공식은 추후에 더 복잡하게 할 순 있지만 일단 넘어간다
// _targetDna가 16자리 이상이 되면 안되기 때문에, 16자리수로 mod 연산
// 새로운 DNA를 생성하고, 평균값을 부여한다
// 새롭게 생성된 DNA를 가지고 _createZombie를 호출한다
// 여기서는 좀비의 이름을 우선 NoName으로 가정하자
	function feedAndMultiply(uint _zombieId, uint _targetDna) public {
		require(msg.sender == zombieToOwner[_zombieId]);
		Zombie storage myZombie = zombies[_zombieId];
		_targetDna = _targetDna % dnaModulus;
		uint newDna = (myZombie.dna + _targetDna) / 2;
		_createZombie("NoName", newDna);
	}




// 하지만 위 코드를 실제로 실행한다면, 컴파일러가 에러메시지를 출력할 것이다
// 문제는 ZombieFeeding 컨트랙트 내에서 _createZombie함수를 호출하려고 했기 때문
// 해당 함수는 private 함수이기 때문에, 다른 컨트랙트에서 접근이 불가능하다

// Internal External 제어자를 활용하자
// internal 은 합수가 정의된 컨트랙트를 상속하는 컨트랙트에서도 접근이 가능하다는 점을 제외하면 private와 동일하다
// external은 함수가 컨트랙트 바깥에서만 호출될 수 있고, 컴트랙트 내의 다른 함수에 의해 호출될 수 없다는 점을 제외하면 public 과 동일하다
// 추후에 external과 public의 필요성에 대해서 알아보자

// public, private, internal, external 은 동일한 문법으로 사용하면
	contract Sandwich {
	  uint private sandwichesEaten = 0;

	  function eat() internal {
		sandwichesEaten++;
	  }
	}

	contract BLT is Sandwich {
	  uint private baconSandwichesEaten = 0;

	  function eatWithBacon() public returns (string) {
		baconSandwichesEaten++;
		// eat 함수가 internal로 선언되었기 때문에 여기서 호출이 가능하다 
		eat();
	  }
	}

// _createZombie 함수를 private에서 internal로 바꾸어 선언하자
    function _createZombie(string _name, uint _dna) internal {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }
	
	
	
// 좀비가 먹이를 먹어야 한다
// 좀비에게 먹이를 먹이려면 스마트 컨트랙트에서 먹이의 DNA를 읽어와야 한다
// 먹이의 DNA 데이터가 블록체인 상에 공개적으로 저장되어 있기 때문에 가져올 수 있다
// 가져오기만 할 수 있을 뿐, "실제로 해당 데이터를 지우지는 못한다"

// 다른 컨트랙트와 상호작용 하기
// 상호작용을 위해서 인터페이스를 정의해야한다
	contract LuckyNumber {
	  mapping(address => uint) numbers;

	  function setNum(uint _num) public {
		numbers[msg.sender] = _num;
	  }

	  function getNum(address _myAddress) public view returns (uint) {
		return numbers[_myAddress];
	  }
	}

// 위 컨트랙트는 아무나 자신의 행운의 번호를 저장할 수 있는 컨트랙트다
// 각자 자신의 이더리움 주소와 연관이 있고, 그 주소를 사용해서 행운의 번호를 가져올 수 있다
// getNum 함수를 이용하면 이 컨트랙트에 있는 데이터를 읽을 수 있다

// external 함수가 있고, getNum함수를 이용하고자 한다
// 먼저, LuckyNumber 컨트랙트의 인터페이스를 정의할 필요가 있다
	contract NumberInterface {
	  function getNum(address _myAddress) public view returns (uint);
	}

// 약간 다르지만, 인터페이스 정의는 컨트랙트 정의와 유사하다
// 다른 컨트랙트와 상호작용하고자 하는 함수만 선언할 뿐, 다른 함수나 상태 변수를 언급하지 않는다
// 또한, 함수 몸체를 선언하지 않고 ;을 사용해서 간단하게 끝낸다
	contract KittyInterface {
	  function getKitty(uint256 _id) external view returns (
		bool isGestating,
		bool isReady,
		uint256 cooldownIndex,
		uint256 nextActionAt,
		uint256 siringWithId,
		uint256 birthTime,
		uint256 matronId,
		uint256 sireId,
		uint256 generation,
		uint256 genes
	  );
	}




// 인터페이스가 정의되면, 아래 코드와 같이 컨트랙트에서 사용가능하다
	contract MyContract {
	  address NumberInterfaceAddress = 0xab38...
	  // ^ 이더리움상의 FavoriteNumber 컨트랙트 주소이다
	  NumberInterface numberContract = NumberInterface(NumberInterfaceAddress)
	  // 이제 `numberContract`는 다른 컨트랙트를 가리키고 있다.

	  function someFunction() public {
		// 이제 `numberContract`가 가리키고 있는 컨트랙트에서 `getNum` 함수를 호출할 수 있다:
		uint num = numberContract.getNum(msg.sender);
		// ...그리고 여기서 `num`으로 무언가를 할 수 있다
	  }
	}


// ckAddress 라는 변수에 크립토키티 컨트랙트 주소가 있다
// 인터페이스와 ckAddress를 이용해서 초기화를 한다
contract KittyInterface {
  function getKitty(uint256 _id) external view returns (
    bool isGestating,
    bool isReady,
    uint256 cooldownIndex,
    uint256 nextActionAt,
    uint256 siringWithId,
    uint256 birthTime,
    uint256 matronId,
    uint256 sireId,
    uint256 generation,
    uint256 genes
  );
}

contract ZombieFeeding is ZombieFactory {

  address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;
  // `ckAddress`를 이용하여 여기에 kittyContract를 초기화한다
  KittyInterface kittyContract = KittyInterface(ckAddress);

  function feedAndMultiply(uint _zombieId, uint _targetDna) public {
    require(msg.sender == zombieToOwner[_zombieId]);
    Zombie storage myZombie = zombies[_zombieId];
    _targetDna = _targetDna % dnaModulus;
    uint newDna = (myZombie.dna + _targetDna) / 2;
    _createZombie("NoName", newDna);
  }

}



